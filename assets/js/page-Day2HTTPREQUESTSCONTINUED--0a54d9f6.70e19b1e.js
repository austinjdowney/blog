(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{496:function(e,t,n){"use strict";n.r(t);var r=n(2),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"day-2-http-requests-continued"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#day-2-http-requests-continued"}},[e._v("#")]),e._v(" Day 2: HTTP REQUESTS CONTINUED")]),e._v(" "),n("h2",{attrs:{id:"afternoon-challenge-https-austinjdowney-github-io-gregslist2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#afternoon-challenge-https-austinjdowney-github-io-gregslist2"}},[e._v("#")]),e._v(" Afternoon Challenge:  https://austinjdowney.github.io/gregslist2/")]),e._v(" "),n("p",[e._v("Daily Journal\nRead Asynchronous Code > JavaScript Promises and answer the following questions")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("What are the three states of a Promise?\nPending: Initial State\nResolved: Completed Promise\nRejected: Failed Promise")])]),e._v(" "),n("li",[n("p",[e._v('How do promises seek to resolve the issues of "callback hell"?')])])]),e._v(" "),n("p",[e._v('Promises seek to clean up code with "chaining" so it is easier to read between .then and .catch statements.. kind of similar to a switch statement withh cases and breaks where you typically chain\n(function (){\n.then (){\nreturn ....};\n.then(){\nreturn ...};\n.then(){\nreturn ...};\n}).catch ();')]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("What is the difference between .then() and .catch()?")])]),e._v(" "),n("p",[e._v(".then() is used if the Promise is resolved (typically the if statement portion of the Promise function).")]),e._v(" "),n("p",[e._v(".catch() is used for the Promises that were rejected and get a different response, whether it is an error response or not")]),e._v(" "),n("h2",{attrs:{id:"morning-challenge"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#morning-challenge"}},[e._v("#")]),e._v(" Morning challenge")]),e._v(" "),n("p",[e._v("function mostCommonLetter(str) {\nlet mostCommonLetter = ''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("//pain don't need to do that\n//let letter= {a:0, b:0, c:0...}\n\nfor (let i = 0; i < str.length; i++) {\n    let char = str[i]\n\n    //do this instead of writing all the letters out\n    //to iterate over all the pertinent letters\n    //if (!letters[char]) {\n    //    letters[char] = 1\n    //} else {\n    //    letters[char]++\n    //}\n    //can also do\n    letters[char] = letters[char] || 0\n    letters[char]++\n}\n\n//move variables up under let char=str[i] and \n//if statement under for loop to iterate over all the letters\n//and tracking is the largest\nlet largest = 0\nlet largestChar = ''\nfor (let char in letters) {\n    if (letters[char] > largest) {\n        largest = letters[char]\n        largestChar = char\n    }\n}\n\nreturn largestChar\n")])])]),n("p",[e._v("}")])])}),[],!1,null,null,null);t.default=s.exports}}]);